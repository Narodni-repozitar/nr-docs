# glitchtip
from oarepo_glitchtip import initialize_glitchtip

initialize_glitchtip()

import json
import os

from dotenv import dotenv_values
from flask.config import Config
from flask_babel import lazy_gettext as _
from marshmallow_i18n_messages import add_i18n_to_marshmallow
from oarepo_requests.services.permissions.workflow_policies import (
    CreatorsFromWorkflowRequestsPermissionPolicy,
)

add_i18n_to_marshmallow(_)


# Import the configuration from the local .env if it exists
# and overwrite it with environment variables
# Loading it this way so could interpolate values
def transform_value(x):
    if not isinstance(x, str):
        return x
    if x == "False":
        return False
    if x == "True":
        return True
    try:
        return json.loads(x)
    except:
        return x


env = Config(os.path.dirname(__file__))
bundled_env = os.path.join(os.path.dirname(__file__), "variables")

if os.path.exists(bundled_env):
    vals = dotenv_values(bundled_env)
    env.from_mapping(vals)
if os.path.exists(".env"):
    vals = dotenv_values(".env")
    env.from_mapping(vals)

if os.environ.get("INVENIO_CONFIG_PATH"):
    from common.deployment_config import load_config_from_directory

    load_config_from_directory(os.environ.get("INVENIO_CONFIG_PATH"), env)


env.from_mapping({k: v for k, v in os.environ.items() if k.startswith("INVENIO_")})

for k, v in env.items():
    setattr(env, k, transform_value(v))
    if k.startswith("INVENIO_"):
        globals()[k[8:]] = transform_value(v)
    else:
        globals()[k] = transform_value(v)

        
# def _(x):  # needed to avoid start time failure with lazy strings
#     return x

# Flask
# =====
# See https://flask.palletsprojects.com/en/1.1.x/config/

# Define the value of the cache control header `max-age` returned by the server when serving
# public files. Files will be cached by the browser for the provided number of seconds.
# See flask documentation for more information:
# https://flask.palletsprojects.com/en/2.1.x/config/#SEND_FILE_MAX_AGE_DEFAULT
SEND_FILE_MAX_AGE_DEFAULT = 300

# Since HAProxy and Nginx route all requests no matter the host header
# provided, the allowed hosts variable is set to localhost. In production it
# should be set to the correct host and it is strongly recommended to only
# route correct hosts to the application.
APP_ALLOWED_HOSTS = ["0.0.0.0", "localhost", "127.0.0.1"]

# Flask-SQLAlchemy
# ================
# See https://flask-sqlalchemy.palletsprojects.com/en/2.x/config/

SQLALCHEMY_DATABASE_URI = (
    "postgresql+psycopg2://"
    f"{env.INVENIO_DATABASE_USER}:{env.INVENIO_DATABASE_PASSWORD}"
    f"@{env.INVENIO_DATABASE_HOST}:{env.INVENIO_DATABASE_PORT}"
    f"/{env.INVENIO_DATABASE_DBNAME}"
)

# Invenio-App
# ===========
# See https://invenio-app.readthedocs.io/en/latest/configuration.html

APP_DEFAULT_SECURE_HEADERS = {
    # NOTE: in production, the content security policy from here is overwritten in deployment !
    "content_security_policy": {
        "default-src": [
            "'self'",
            "data:",  # for fonts
            "'unsafe-inline'",  # for inline scripts and styles
            "blob:",  # for pdf preview
            # Add your own policies here (e.g. analytics)
        ],
        "frame-ancestors": ["'self'"],
        "frame-src": ["'self'"],
    },
    "content_security_policy_report_only": False,
    "content_security_policy_report_uri": None,
    "force_file_save": False,
    "force_https": True,
    "force_https_permanent": False,
    # NOTE: in production, the frame options are overwritten in deployment !
    "frame_options": "SAMEORIGIN",
    "frame_options_allow_from": None,
    # session cookie as strict as possible
    "session_cookie_samesite": "Lax",
    "session_cookie_http_only": True,
    "session_cookie_secure": True,
    # NOTE: in production, STS is overwritten in deployment !
    "strict_transport_security": True,
    "strict_transport_security_include_subdomains": True,
    "strict_transport_security_max_age": 31556926,  # One year in seconds
    "strict_transport_security_preload": False,
}

# Flask-Babel
# ===========
# See https://python-babel.github.io/flask-babel/#configuration

# Default locale (language)
# BABEL_DEFAULT_LOCALE = 'cs'
BABEL_DEFAULT_LOCALE = "en"

# Default time zone
BABEL_DEFAULT_TIMEZONE = "Europe/Prague"

# Invenio-I18N
# ============
# See https://invenio-i18n.readthedocs.io/en/latest/configuration.html

# Other supported languages (do not include BABEL_DEFAULT_LOCALE in list).
I18N_LANGUAGES = [
    ("cs", _("Czech")),
    # ('tr', _('Turkish')),
]

# Invenio-Theme
# =============
# See https://invenio-theme.readthedocs.io/en/latest/configuration.html

APP_THEME = ["oarepo", "semantic-ui"]

INSTANCE_THEME_FILE = "./less/theme.less"

# Invenio-Files-Rest
# ==================
FILES_REST_STORAGE_FACTORY = "invenio_s3.s3fs_storage_factory"

# Invenio-S3
# ==========
S3_ENDPOINT_URL = (
    f"{env.INVENIO_S3_PROTOCOL}://{env.INVENIO_S3_HOST}:{env.INVENIO_S3_PORT}/"
)
S3_ACCESS_KEY_ID = env.INVENIO_S3_ACCESS_KEY
S3_SECRET_ACCESS_KEY = env.INVENIO_S3_SECRET_KEY

# Allow S3 endpoint in the CSP rules
APP_DEFAULT_SECURE_HEADERS["content_security_policy"]["default-src"].append(
    S3_ENDPOINT_URL,
)

APP_DEFAULT_SECURE_HEADERS["content_security_policy"]["default-src"].append(
    # hack for displaying images from another source (this one is for licenses specifically)
    "https://licensebuttons.net/"
)

# Invenio-Records-Resources
# =========================
# See https://github.com/inveniosoftware/invenio-records-resources/blob/master/invenio_records_resources/config.py

SITE_UI_URL = f"https://{env.INVENIO_UI_HOST}:{env.INVENIO_UI_PORT}"
SITE_API_URL = f"https://{env.INVENIO_API_HOST}:{env.INVENIO_API_PORT}/api"

# Authentication - Invenio-Accounts and Invenio-OAuthclient
# =========================================================
# See: https://inveniordm.docs.cern.ch/customize/authentication/

# Invenio-Accounts
# ----------------
# See https://github.com/inveniosoftware/invenio-accounts/blob/master/invenio_accounts/config.py
ACCOUNTS_LOCAL_LOGIN_ENABLED = (
    env.INVENIO_ACCOUNTS_LOCAL_LOGIN_ENABLED
)  # enable local login
SECURITY_REGISTERABLE = (
    env.INVENIO_SECURITY_REGISTERABLE
)  # local login: allow users to register
SECURITY_RECOVERABLE = (
    env.INVENIO_SECURITY_RECOVERABLE
)  # local login: allow users to reset the password
SECURITY_CHANGEABLE = (
    env.INVENIO_SECURITY_CHANGEABLE
)  # local login: allow users to change psw
SECURITY_CONFIRMABLE = (
    env.INVENIO_SECURITY_CONFIRMABLE
)  # local login: users can confirm e-mail address
SECURITY_LOGIN_WITHOUT_CONFIRMATION = (
    env.INVENIO_SECURITY_LOGIN_WITHOUT_CONFIRMATION
)  # require users to confirm email before being able to login

# Invenio-OAuthclient
# -------------------
# See https://github.com/inveniosoftware/invenio-oauthclient/blob/master/invenio_oauthclient/config.py

if os.environ.get("INVENIO_REMOTE_AUTH_ENABLED", "no").lower() in ("true", "yes", "1"):
    from oarepo_oidc_einfra import EINFRA_LOGIN_APP

    OAUTHCLIENT_REMOTE_APPS = {"e-infra": EINFRA_LOGIN_APP}
else:
    OAUTHCLIENT_REMOTE_APPS = {}

# set the following environment variable
# service account which is used to create groups and resources in perun
# this is a "user service", hence the username and password
# export INVENIO_EINFRA_SERVICE_USERNAME=
# export INVENIO_EINFRA_SERVICE_PASSWORD=

# Repository: VO, group containing all communities, facility for the repository
# export INVENIO_EINFRA_REPOSITORY_VO_ID=
# export INVENIO_EINFRA_COMMUNITIES_GROUP_ID=
# export INVENIO_EINFRA_REPOSITORY_FACILITY_ID=

# name of the service which provides export of the authz data
# export INVENIO_EINFRA_SYNC_SERVICE_NAME=


from invenio_oauthclient.views.client import auto_redirect_login

ACCOUNTS_LOGIN_VIEW_FUNCTION = (
    auto_redirect_login  # autoredirect to external login if enabled
)
OAUTHCLIENT_AUTO_REDIRECT_TO_EXTERNAL_LOGIN = True  # autoredirect to external login

# Invenio-UserProfiles
# --------------------
USERPROFILES_READ_ONLY = (
    False  # allow users to change profile info (name, email, etc...)
)

# OAI-PMH
# =======
# See https://github.com/inveniosoftware/invenio-oaiserver/blob/master/invenio_oaiserver/config.py

OAISERVER_ID_PREFIX = SITE_UI_URL
"""The prefix that will be applied to the generated OAI-PMH ids."""

# Invenio-Search
# --------------

SEARCH_INDEX_PREFIX = env.INVENIO_SEARCH_INDEX_PREFIX

SEARCH_HOSTS = [
    dict(host=env.INVENIO_OPENSEARCH_HOST, port=env.INVENIO_OPENSEARCH_PORT),
]

SEARCH_CLIENT_CONFIG = dict(
    use_ssl=env.INVENIO_OPENSEARCH_USE_SSL,
    verify_certs=env.INVENIO_OPENSEARCH_VERIFY_CERTS,
    ssl_assert_hostname=env.INVENIO_OPENSEARCH_ASSERT_HOSTNAME,
    ssl_show_warn=env.INVENIO_OPENSEARCH_SHOW_WARN,
    ca_certs=env.get("INVENIO_OPENSEARCH_CA_CERTS_PATH", None),
)

# Cache
# --------------
INVENIO_CACHE_TYPE = "redis"

CACHE_REDIS_URL = (
    f"redis://{env.INVENIO_REDIS_HOST}:{env.INVENIO_REDIS_PORT}"
    f"/{env.INVENIO_REDIS_CACHE_DB}"
)

ACCOUNTS_SESSION_REDIS_URL = (
    f"redis://{env.INVENIO_REDIS_HOST}:{env.INVENIO_REDIS_PORT}"
    f"/{env.INVENIO_REDIS_SESSION_DB}"
)

COMMUNITIES_IDENTITIES_CACHE_REDIS_URL = (
    f"redis://{env.INVENIO_REDIS_HOST}:{env.INVENIO_REDIS_PORT}"
    f"/{env.INVENIO_REDIS_COMMUNITIES_CACHE_DB}"
)

# Local schema
# --------------
RECORDS_REFRESOLVER_CLS = "invenio_records.resolver.InvenioRefResolver"
RECORDS_REFRESOLVER_STORE = "invenio_jsonschemas.proxies.current_refresolver_store"
JSONSCHEMAS_HOST = SITE_UI_URL

# Extended vocabularies
# ---------------------

from oarepo_vocabularies.authorities import RORProviderV2
from oarepo_vocabularies.resources.config import VocabulariesResourceConfig
from oarepo_vocabularies.services.config import VocabulariesConfig

VOCABULARIES_SERVICE_CONFIG = VocabulariesConfig
VOCABULARIES_RESOURCE_CONFIG = VocabulariesResourceConfig


INVENIO_VOCABULARY_TYPE_METADATA = {
    "languages": {
        "name": {
            "cs": "Jazyky",
            "en": "Languages",
        },
        "description": {
            "cs": "Slovník obsahující definice světových jazyků.",
            "en": "Language definitions vocabulary.",
        },
        "props": {
            "alpha3CodeENG": {
                "description": _("ISO 639-2 standard 3-letter language code"),
                "icon": None,
                "label": _("Alpha3 code (English)"),
                "multiple": False,
                "placeholder": "eng, cze...",
                "search": False,
            },
            "alpha3CodeNative": {
                "description": _("ISO 639-2 standard 3-letter language code"),
                "icon": None,
                "label": _("Alpha3 code (native)"),
                "multiple": False,
                "options": [],
                "placeholder": "eng, ces...",
                "search": False,
            },
        },
        "dump_options": True,
    },
    "rights": {
        "name": {
            "cs": "Licence",
            "en": "Licences",
        },
        "description": {
            "cs": "Slovník s definicemi licencí a druhů autorských práv.",
            "en": "License definitions vocabulary.",
        },
        "dump_options": True,
    },
    "contributor-types": {
        "name": {"cs": "Role přispěvatele", "en": "Contributor roles"},
        "props": {
            "marcCode": {
                "label": _("MARC code"),
            },
            "dataCiteCode": {"label": _("DataCite code")},
        },
        "dump_options": True,
    },
    "countries": {
        "name": {"cs": "Státy", "en": "Countries"},
        "props": {
            "alpha3Code": {
                "label": _("Alpha3 code (English)"),
                "placeholder": "USA, CZE...",
            }
        },
        "dump_options": True,
    },
    "funders": {
        "name": {"cs": "Poskytovatelé finanční podpory", "en": "Research funders"},
        "props": {"acronym": {"label": _("Acronym")}},
        "dump_options": True,
    },
    "institutions": {
        "name": {"cs": "Instituce", "en": "Institutions"},
        "hierarchical": True,
        "authority": RORProviderV2,
        "props": {
            "acronym": {"label": _("Acronym")},
            "contexts": {"label": _("Contexts")},
            "RID": {
                "label": _("RID"),
                "description": _("A Registered Application Provider Identifier"),
            },
            "ICO": {"label": _("ICO")},
            "nameType": {"label": _("Name type"), "default": "organizational"},
        },
    },
    "item-relation-types": {
        "name": {"cs": "Typ vztahu", "en": "Relation type"},
        "description": {
            "cs": "Typ vztahu popisovaného dokumentu k propojené jednotce",
            "en": "The type of relationship of the described document to the interconnected item (unit)",
        },
        "props": {"pair": {"label": _("Relation")}},
        "dump_options": True,
    },
    "resource-types": {
        "name": {
            "cs": "Typy zdrojů",
            "en": "Resource types",
        },
        "props": {
            "coarType": {"label": _("COAR type")},
            "dataCiteCode": {"label": _("DataCite code")},
        },
        "dump_options": True,
        "hierarchical": True,
    },
    "subject-categories": {
        "name": {
            "cs": "Oborové třídění",
            "en": "Subject categories",
        },
        "dump_options": True,
        "hierarchical": True,
    },
    "access-rights": {
        "name": {
            "cs": "Přístupová práva",
            "en": "Access rights",
        },
        "dump_options": True,
    },
}

# RDM vocabularies schemes.

import re

import idutils


def is_researcher_id(identifier):
    pattern = r"^[A-Za-z]+-\d{4}-\d{4}$"
    return bool(re.match(pattern, identifier))


def is_vedidk(identifier):
    cleaned_identifier = identifier.strip()
    return cleaned_identifier.isdigit() and len(cleaned_identifier) == 7


def is_scopus_id(identifier):
    return identifier.replace(".0", "").isdigit()


VOCABULARIES_NAMES_SCHEMES = {
    "orcid": {"label": "ORCID", "validator": idutils.is_orcid},
    "vedidk": {"label": "VEDIDK", "validator": is_vedidk},
    "scopusID": {"label": "Scopus ID", "validator": is_scopus_id},
    "researcherID": {"label": "Researcher ID", "validator": is_researcher_id},
}

# List of funders is curated, validators are not needed.
VOCABULARIES_FUNDER_SCHEMES = {
    "ROR": {"label": "ROR", "validator": lambda identifier: True},
    "CrossrefFunderID": {
        "label": "CrossrefFunderID",
        "validator": lambda identifier: True,
    },
}

# List of affiliations is curated, validators are not needed.
VOCABULARIES_AFFILIATION_SCHEMES = {
    "ROR": {"label": "ROR", "validator": lambda identifier: True},
    "ICO": {"label": "ICO", "validator": lambda identifier: True},
    "URL": {"label": "URL", "validator": lambda identifier: True},
}

# Files storage location
# ---------------
FILES_REST_STORAGE_CLASS_LIST = {
    "L": "Local",
    "F": "Fetch",
    "R": "Remote",
}
FILES_REST_DEFAULT_STORAGE_CLASS = "L"

# Redis port redirection
# ---------------------
CELERY_BROKER_URL = (
    f"amqp://{env.INVENIO_RABBIT_USER}:{env.INVENIO_RABBIT_PASSWORD}"
    f"@{env.INVENIO_RABBIT_HOST}:{env.INVENIO_RABBIT_PORT}/"
)
BROKER_URL = CELERY_BROKER_URL
CELERY_RESULT_BACKEND = (
    f"redis://{env.INVENIO_REDIS_HOST}:{env.INVENIO_REDIS_PORT}"
    f"/{env.INVENIO_REDIS_CELERY_RESULT_DB}"
)

# Instance secret key, used to encrypt stuff (for example, access tokens) inside database
SECRET_KEY = env.INVENIO_SECRET_KEY

# Invenio hacks
# -------------

# Invenio has problems with order of loading templates. If invenio-userprofiles is loaded
# before invenio-theme, the userprofile page will not work because base settings page
# will be taken from userprofiles/semantic-ui/userprofiles/settings/base.html which is faulty.
# If invenio-theme is loaded first, SETTINGS_TEMPLATE is filled, then userprofiles will use
# it and the UI loads correctly.
#
# This line just makes sure that SETTINGS_TEMPLATE is always set up.
SETTINGS_TEMPLATE = "invenio_theme/page_settings.html"

# UI
# ---

THEME_HEADER_TEMPLATE = "header.html"
THEME_FOOTER_TEMPLATE = "footer.html"
THEME_JAVASCRIPT_TEMPLATE = "javascript.html"
THEME_CSS_TEMPLATE = "css.html"
THEME_TRACKINGCODE_TEMPLATE = "oarepo_ui/trackingcode.html"
THEME_SEARCHBAR_TEMPLATE = "searchbar.html"

# remove when you create your own title page
THEME_FRONTPAGE = False

# Header logo
THEME_LOGO = "images/repo_logo_cs_rgb.svg"

THEME_SITENAME = _("NR Document repository")
THEME_FRONTPAGE_TITLE = _("Beta version of document respository")
THEME_FRONTPAGE_TEMPLATE = "frontpage.html"
THEME_FRONTPAGE_LOGO = "images/repo_logo_<language>_rgb.svg"

# We set this to avoid bug: https://github.com/inveniosoftware/invenio-administration/issues/180
THEME_HEADER_LOGIN_TEMPLATE = "header_login.html"

RATELIMIT_GUEST_USER = "5000 per hour;500 per minute"
RATELIMIT_AUTHENTICATED_USER = "20000 per hour;2000 per minute"

BASE_TEMPLATE = "oarepo_ui/base_page.html"

# OAIPMH client
from oarepo_runtime.datastreams.readers.excel import ExcelReader
from oarepo_runtime.datastreams.readers.json import JSONLinesReader, JSONReader
from oarepo_runtime.datastreams.readers.service import ServiceReader
from oarepo_runtime.datastreams.readers.yaml import YamlReader

from common.readers import S3HarvestReader

DATASTREAMS_READERS = {
    "excel": ExcelReader,
    "yaml": YamlReader,
    "json": JSONReader,
    "json-lines": JSONLinesReader,
    "service": ServiceReader,
    "s3": S3HarvestReader,
}

# Global search
GLOBAL_SEARCH_MODELS = [
    {
        "model_service": "documents.services.records.service.DocumentsService",
        "service_config": "documents.services.records.config.DocumentsServiceConfig",
        "ui_resource_config": "ui.documents.DocumentsResourceConfig",
        "api_resource_config": "documents.resources.records.config.DocumentsResourceConfig",
    }
]

DASHBOARD_RECORD_CREATE_URL = "/docs/_new"

# Communities
# TODO: After PR https://github.com/inveniosoftware/invenio-communities/pull/1192
# is merged, the following two settings might be removed
COMMUNITIES_CUSTOM_FIELDS = []
COMMUNITIES_CUSTOM_FIELDS_UI = []

# TODO: This will be removed after we fix "create" permission in UI
from common.workflows import DocsCommunitiesPermissionPreset
from common.workflows.vocabularies import DocsVocabulariesPermissionPolicy

OAREPO_PERMISSIONS_PRESETS = {
    "docs": DocsCommunitiesPermissionPreset,
    "docs-vocabularies": DocsVocabulariesPermissionPolicy,
}

VOCABULARIES_PERMISSIONS_PRESETS = ["docs-vocabularies"]

from oarepo_workflows import Workflow

from common.workflows.default import DefaultWorkflowPermissions, DefaultWorkflowRequests
from common.workflows.generic_community import (
    GenericCommunityWorkflowPermissions,
    GenericCommunityWorkflowRequests,
)
from common.workflows.restricted import (
    RestrictedWorkflowPermissions,
    RestrictedWorkflowRequests,
)

WORKFLOWS = {
    "default": Workflow(
        label=_("Default workflow"),
        permission_policy_cls=DefaultWorkflowPermissions,
        request_policy_cls=DefaultWorkflowRequests,
    ),
    "generic_community": Workflow(
        label=_("Generic community workflow"),
        permission_policy_cls=GenericCommunityWorkflowPermissions,
        request_policy_cls=GenericCommunityWorkflowRequests,
    ),
    "restricted": Workflow(
        label=_("Restricted workflow"),
        permission_policy_cls=RestrictedWorkflowPermissions,
        request_policy_cls=RestrictedWorkflowRequests,
    ),
}

COMMUNITIES_ROLES = [
    # note: order matters, roles should be sorted by importance
    # from the most important to the least
    dict(
        name="owner",
        title=_("Community owner"),
        description=_("Can manage community."),
        is_owner=True,
        can_manage=True,
        can_manage_roles=["owner", "curator", "submitter", "member"],
    ),
    dict(
        name="curator",
        title=_("Curator"),
        description=_("Can curate records."),
        can_manage=True,
        # NTK decision: curator should NOT be able to manage curators
        can_manage_roles=["submitter", "member"],
    ),
    dict(
        name="submitter",
        title=_("Submitter"),
        description=_("Can submit records."),
    ),
    dict(
        name="member",
        title=_("Member"),
        description=_("Community member with read permissions."),
    ),
]

REQUESTS_PERMISSION_POLICY = CreatorsFromWorkflowRequestsPermissionPolicy

COMMUNITIES_REGISTER_UI_BLUEPRINT = False

RECORD_ROUTES = {"new": "/docs/_new?community={community_slug}"}

RDM_RECORDS_ALLOW_RESTRICTION_AFTER_GRACE_PERIOD = False

DATACITE_URL = "https://api.test.datacite.org/dois"
DATACITE_MAPPING = {
    "local://documents-1.0.0.json": "common.doi.mapping.DataCiteMappingNRDocs"
}
DATACITE_MODE = "ON_EVENT_DRAFT"

DATACITE_CREDENTIALS_DEFAULT = {
    "prefix": env.INVENIO_DOI_DATACITE_PREFIX,
    "password": env.INVENIO_DOI_DATACITE_PASSWORD,
    "username": env.INVENIO_DOI_DATACITE_USERNAME,
}

# mapping of community -> datacite credentials as above
DATACITE_CREDENTIALS = {
    "cenia": {
        "prefix": "10.83139",
        "password": env.INVENIO_DOI_CENIA_DATACITE_PASSWORD,
        "username": env.INVENIO_DOI_CENIA_DATACITE_USERNAME,
    },
    "centrum-dopravniho-vyzkumu": {
        "prefix": "10.83268",
        "password": env.INVENIO_DOI_CDV_DATACITE_PASSWORD,
        "username": env.INVENIO_DOI_CDV_DATACITE_USERNAME,
    },
    "eosc": {
        "prefix": "10.83499",
        "password": env.INVENIO_DOI_EOSC_DATACITE_PASSWORD,
        "username": env.INVENIO_DOI_EOSC_DATACITE_USERNAME,
    },
}

# restricted communities permissions
from common.services.communities.permissions import NrDocsCommunitiesPermissionPolicy

COMMUNITIES_PERMISSION_POLICY = NrDocsCommunitiesPermissionPolicy

WEBPACKEXT_PROJECT = "oarepo_ui.webpack:project"

INVENIO_RDM_ENABLED = True
RDM_PERSISTENT_IDENTIFIERS = {"doi": {}}
RDM_USER_MODERATION_ENABLED = False
RDM_RECORDS_ALLOW_RESTRICTION_AFTER_GRACE_PERIOD = False
RDM_ALLOW_METADATA_ONLY_RECORDS = True
RDM_DEFAULT_FILES_ENABLED = False
RDM_SEARCH_SORT_BY_VERIFIED = False

from datetime import timedelta

RDM_RECORDS_RESTRICTION_GRACE_PERIOD = timedelta(days=30)
"""Grace period for changing record access to restricted."""

RDM_RECORDS_ALLOW_RESTRICTION_AFTER_GRACE_PERIOD = False
"""Whether record access restriction is allowed after the grace period or not."""

ALLOWED_DOCUMENT_FILE_EXTENSIONS = [
    ".pdf",
    ".png",
    ".jpg",
    ".jp2",
    ".tiff",
    ".mp4",
    ".mov",
    ".mkv",
    ".mp3",
    ".flac",
    ".wav",
    ".wave",
    ".csv",
]


# import logging

# # Configure the logging
# logging.basicConfig(
#     level=logging.WARNING,
#     format='%(asctime)s - %(name)s - %(levelname)s - %(filename)s:%(lineno)d - %(funcName)s - %(message)s'
# )

# statistics
from invenio_app_rdm.config import (  # noqa
    STATS_PERMISSION_FACTORY,
    STATS_AGGREGATIONS,
    STATS_EVENTS,
    STATS_QUERIES,
)

# cronjobs
from celery.schedules import crontab
from invenio_stats.tasks import StatsAggregationTask, StatsEventTask


CELERY_BEAT_SCHEDULE = {
    "indexer": {
        "task": "invenio_records_resources.tasks.manage_indexer_queues",
        "schedule": timedelta(seconds=10),
    },
    "accounts_sessions": {
        "task": "invenio_accounts.tasks.clean_session_table",
        "schedule": timedelta(minutes=60),
    },
    "accounts_ips": {
        "task": "invenio_accounts.tasks.delete_ips",
        "schedule": timedelta(hours=6),
    },
    # "draft_resources": {
    #     "task": ("invenio_drafts_resources.services.records.tasks.cleanup_drafts"),
    #     "schedule": timedelta(minutes=60),
    # },
    # "rdm_records": {
    #     "task": "invenio_rdm_records.services.tasks.update_expired_embargos",
    #     "schedule": crontab(minute=2, hour=0),
    # },
    # "expire_requests": {
    #     "task": "invenio_requests.tasks.check_expired_requests",
    #     "schedule": crontab(minute=3, hour=0),
    # },
    # "file-checks": {
    #     "task": "invenio_files_rest.tasks.schedule_checksum_verification",
    #     "schedule": timedelta(hours=1),
    #     "kwargs": {
    #         "batch_interval": {"hours": 1},
    #         "frequency": {"days": 14},
    #         "max_count": 0,
    #         # Query taking into account only files with URI prefixes defined by
    #         # the FILES_REST_CHECKSUM_VERIFICATION_URI_PREFIXES config variable
    #         "files_query": "invenio_app_rdm.utils.files.checksum_verification_files_query",
    #     },
    # },
    # "file-integrity-report": {
    #     "task": "invenio_app_rdm.tasks.file_integrity_report",
    #     "schedule": crontab(minute=0, hour=7),  # Every day at 07:00 UTC
    # },
    # indexing of statistics events & aggregations
    "stats-process-events": {
        **StatsEventTask,
        "schedule": crontab(minute="25,55"),  # Every hour at minute 25 and 55
    },
    "stats-aggregate-events": {
        **StatsAggregationTask,
        "schedule": crontab(minute=0),  # Every hour at minute 0
    },
    # "reindex-stats": StatsRDMReindexTask,  # Every hour at minute 10
    # Invenio communities provides some caching that has the potential to be never removed,
    # therefore, we need a cronjob to ensure that at least once per day we clear the cache
    "clear-cache": {
        "task": "invenio_communities.tasks.clear_cache",
        "schedule": crontab(minute=0, hour=1),  # Every day at 01:00 UTC
    },
    "clean-access-request-tokens": {
        "task": "invenio_rdm_records.requests.access.tasks.clean_expired_request_access_tokens",
        "schedule": crontab(minute=4, hour=0),
    },
}

OAREPO_VOCABULARIES_SPECIALIZED_SERVICES = {
    "awards": "awards",
    "funders": "funders",
    "names": "names",
    "affiliations": "affiliations",
}
RDM_EXCLUDED_COMPONENTS = ["invenio_rdm_records.services.components.pids.PIDsComponent"]
